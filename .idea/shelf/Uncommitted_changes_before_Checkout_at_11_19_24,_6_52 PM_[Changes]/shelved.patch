Index: src/app/components/outfits/outfits-form/outfits-form.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Component, EventEmitter, Inject, Input, Output} from '@angular/core';\nimport {IClothing, IOrder, IOutfit} from \"../../../interfaces\";\nimport {FormBuilder, FormGroup, ReactiveFormsModule} from '@angular/forms';\nimport {UploadService} from '../../../services/upload.service';\nimport {NgxDropzoneModule} from 'ngx-dropzone';\nimport {CommonModule, NgOptimizedImage} from '@angular/common';\nimport Aos from \"aos\";\nimport { OutfitsComponent } from '../../../pages/outfits/outfits.component';\n\n@Component({\n    selector: 'app-outfits-form',\n    standalone: true,\n    imports: [NgxDropzoneModule, ReactiveFormsModule, CommonModule, NgOptimizedImage],\n    templateUrl: './outfits-form.component.html',\n    styleUrl: './outfits-form.component.scss',\n    providers: [UploadService]\n})\nexport class OutfitsFormComponent {\n    fb: FormBuilder = Inject(FormBuilder);\n    @Input() outfitsForm!: FormGroup;\n    @Input() manualClothing?: IClothing[];\n    @Output() callSaveMethod = new EventEmitter<IOutfit>();\n    \n    @Output() callUpdateMethod = new EventEmitter<IOutfit>();\n    @Output() callSetIsAddClothingModalActive = new EventEmitter<unknown>();\n\n    files: File[] = [];\n\n    //Para el tipo de creacion de outfit\n    outfitCreationOption: string = 'manual';\n    //Para modificar el texto dentro del dropdown\n    dropdownOptionSelected: string = 'Estilo';\n\n\n    //Estas variables son para la creacion de outfits manuales\n    //Para modificar el texto dentro del dropdown de estilo (a la hora de crear outfits manuales)\n    dropdownOptionSelectedManualOutfitStyle: string = 'Estilo';\n    //Para guardar la data de las prendas seleccionadas\n    clothing: IClothing[] = [];\n    //Para guardar el url del la imagen a previsualizar\n    previewImage?: string;\n\n    constructor(private _uploadService: UploadService,\n        private _outfitsComponent : OutfitsComponent\n    ) {\n    }\n\n    ngOnInit() {\n        Aos.init();\n    }\n\n    private uploadImage() {\n\n        const file_data = this.files[0];\n        const data = new FormData();\n        data.append('file', file_data);\n        data.append('upload_preset', 'technest-preset');\n        data.append('cloud_name', 'dklipon9i');\n        //sube la imagen a Cloudinary\n        this._uploadService.uploadImage(data).subscribe(async (response) => {\n            if (response) {\n                //Guarda la prenda con el seteo de la imagen\n                this.outfitsForm.patchValue({\n                    imageUrl: response.url\n                });\n                //await this.callSaveClothing();\n            }\n        });\n    }\n\n    onSelect(event: any) {\n        if (this.files.length >= 0) {\n            this.onRemove(event);\n        }\n        this.files.push(...event.addedFiles);\n    }\n\n    onRemove(event: any) {\n        this.files.splice(this.files.indexOf(event), 1);\n    }\n\n    setOutfitCreationOption(outfitCreationOption: string) {\n        this.outfitCreationOption = outfitCreationOption;\n        if (this.outfitCreationOption === 'manual' || this.outfitCreationOption === 'random') {\n            this.dropdownOptionSelected = 'Estilo';\n        } else {\n            this.dropdownOptionSelected = this.capitalizeAndReplace(outfitCreationOption);\n        }\n    }\n\n    capitalizeAndReplace(text: string): string {\n        if (!text) return '';\n        const formattedText = text.replace(/_/g, ' ');\n        return formattedText.charAt(0).toUpperCase() + formattedText.slice(1).toLowerCase();\n    }\n\n    async getOutfitRandom(){\n         await this._outfitsComponent.callGetOutfitByUserRandom();\n\n         this.otherFunction();\n    }\n\n    otherFunction(){\n        \n    }\n        \n    callSetIsAddClothingModal() {\n\n        this.callSetIsAddClothingModalActive.emit();\n\n    }\n\n    public loadPreview(imageUrl: string) {\n        this.previewImage = imageUrl;\n    }\n\n    callSave() {\n        let outfit: IOutfit = {\n            clothing: [],\n            user: {},\n            name: this.outfitsForm.controls['name'].value\n        }\n        if(this.manualClothing?.length) {\n            outfit.clothing = this.manualClothing;\n        }\n        if(outfit.id) {\n            this.callUpdateMethod.emit(outfit);\n        } else {\n            this.callSaveMethod.emit(outfit);\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/components/outfits/outfits-form/outfits-form.component.ts b/src/app/components/outfits/outfits-form/outfits-form.component.ts
--- a/src/app/components/outfits/outfits-form/outfits-form.component.ts	(revision 6c5db76ee8d0a7900ff30d76001bfb4de9444448)
+++ b/src/app/components/outfits/outfits-form/outfits-form.component.ts	(date 1732061353349)
@@ -1,16 +1,17 @@
-import {Component, EventEmitter, Inject, Input, Output} from '@angular/core';
+import {Component, EventEmitter, Inject, Input, Output, SimpleChanges} from '@angular/core';
 import {IClothing, IOrder, IOutfit} from "../../../interfaces";
 import {FormBuilder, FormGroup, ReactiveFormsModule} from '@angular/forms';
 import {UploadService} from '../../../services/upload.service';
 import {NgxDropzoneModule} from 'ngx-dropzone';
 import {CommonModule, NgOptimizedImage} from '@angular/common';
 import Aos from "aos";
-import { OutfitsComponent } from '../../../pages/outfits/outfits.component';
+import {OutfitsComponent} from '../../../pages/outfits/outfits.component';
+import {LottieComponentComponent} from "../../../pages/lottie-component/lottie-component.component";
 
 @Component({
     selector: 'app-outfits-form',
     standalone: true,
-    imports: [NgxDropzoneModule, ReactiveFormsModule, CommonModule, NgOptimizedImage],
+    imports: [NgxDropzoneModule, ReactiveFormsModule, CommonModule, NgOptimizedImage, LottieComponentComponent],
     templateUrl: './outfits-form.component.html',
     styleUrl: './outfits-form.component.scss',
     providers: [UploadService]
@@ -20,7 +21,7 @@
     @Input() outfitsForm!: FormGroup;
     @Input() manualClothing?: IClothing[];
     @Output() callSaveMethod = new EventEmitter<IOutfit>();
-    
+
     @Output() callUpdateMethod = new EventEmitter<IOutfit>();
     @Output() callSetIsAddClothingModalActive = new EventEmitter<unknown>();
 
@@ -38,10 +39,18 @@
     //Para guardar la data de las prendas seleccionadas
     clothing: IClothing[] = [];
     //Para guardar el url del la imagen a previsualizar
-    previewImage?: string;
+    previewImage?: string = 'lottie';
+    //Para cuando el preview est√° vacio
+    lottie = {
+        path: './assets/lottie/emptyOutfit.json',
+        loop: true,
+        autoplay: true
+    };
+    //Guardar el valor de la categoria
+    categoryName?: string;
 
     constructor(private _uploadService: UploadService,
-        private _outfitsComponent : OutfitsComponent
+                private _outfitsComponent: OutfitsComponent
     ) {
     }
 
@@ -49,6 +58,13 @@
         Aos.init();
     }
 
+    ngOnChanges(changes: SimpleChanges): void {
+        if (this.manualClothing?.length) {
+            // @ts-ignore
+            this.previewImage = this.manualClothing.at(0).imageUrl;
+        }
+    }
+
     private uploadImage() {
 
         const file_data = this.files[0];
@@ -94,16 +110,16 @@
         return formattedText.charAt(0).toUpperCase() + formattedText.slice(1).toLowerCase();
     }
 
-    async getOutfitRandom(){
-         await this._outfitsComponent.callGetOutfitByUserRandom();
+    async getOutfitRandom() {
+        await this._outfitsComponent.callGetOutfitByUserRandom();
 
-         this.otherFunction();
+        this.otherFunction();
     }
 
-    otherFunction(){
-        
+    otherFunction() {
+
     }
-        
+
     callSetIsAddClothingModal() {
 
         this.callSetIsAddClothingModalActive.emit();
@@ -118,15 +134,26 @@
         let outfit: IOutfit = {
             clothing: [],
             user: {},
-            name: this.outfitsForm.controls['name'].value
+            name: this.outfitsForm.controls['name'].value,
+            category: {
+                name: ''
+            }
+        }
+        if (this.categoryName) {
+            // @ts-ignore
+            outfit.category.name = this.categoryName.toUpperCase();
         }
-        if(this.manualClothing?.length) {
+        if (this.manualClothing?.length) {
             outfit.clothing = this.manualClothing;
         }
-        if(outfit.id) {
+        if (outfit.id) {
             this.callUpdateMethod.emit(outfit);
         } else {
             this.callSaveMethod.emit(outfit);
         }
     }
+
+    setCategoryName(name: string) {
+        this.categoryName = this.capitalizeAndReplace(name);
+    }
 }
